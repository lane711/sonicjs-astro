---
import { apiConfig } from '../../../db/routes';
import { getFieldDefinitions } from '../../../services/fields';
import AdminLayout from '../layouts/admin-layout.astro';
import FormComponent from './form-component.astro';

const { form } = Astro.params;
const tableConfigRecord = apiConfig.find((t) => t.route === form);
if (!tableConfigRecord) {
  return;
}

// const definitionObject = tableConfig.definition;

// // Convert the nested objects to an array
// const definitionArray = Object.values(definitionObject);

// const fields = Object.entries(tableConfig.fields);

// const formFields = definitionArray.map((field) => {
//   const key = field.config.name;
//   const fieldOverride = tableConfig.fields[key];
//   if (fieldOverride) {
//     return { key, type: fieldOverride };
//   } else {
//     return { key, type: "textField" };
//   }
// });

if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData();
    var object: Record<string, FormDataEntryValue | FormDataEntryValue[]> = {};
    formData.forEach((value, key) => {
      // Reflect.has in favor of: object.hasOwnProperty(key)
      if (!Reflect.has(object, key)) {
        object[key] = value;
        return;
      }
      if (!Array.isArray(object[key])) {
        object[key] = [object[key]];
      }
      object[key].push(value);
    });
    var json = JSON.stringify(object);

    //now post to our own post api
    const baseURl = Astro.request.url.split('/admin/')[0];
    const postUrl = `${baseURl}/api/v1/${tableConfigRecord.route}`;
    try {
      const response = await fetch(postUrl, {
        method: 'POST',
        body: json,
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json',
          Cookie: Astro.request.headers.get('cookie') || ''
        }
      });

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      const result = await response.json();
      // console.log("Success:", result);
    } catch (error) {
      console.error('Error:', error);
    }

    // Do something with the data
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  } finally {
    return Astro.redirect(`/admin/tables/${tableConfigRecord.route}`);
  }
}
---

<AdminLayout title=`SonicJs Admin` | {form} `>
  <FormComponent form='{form}' title='New' /></AdminLayout
>
